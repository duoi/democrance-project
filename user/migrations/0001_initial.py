# Generated by Django 3.0.2 on 2020-01-27 09:15

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(db_index=True, default=uuid.uuid4, max_length=36, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Email Address')),
                ('first_name', models.TextField(blank=True, default=None, null=True)),
                ('last_name', models.TextField(blank=True, default=None, null=True)),
                ('date_of_birth', models.DateTimeField(blank=True, default=None, help_text='The date of birth of this user', null=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.')),
                ('is_customer', models.BooleanField(default=True, help_text='Whether or not this user is a Democrance customer')),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user is a superuser.')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
